// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var DateUtil$Workhours = require("./DateUtil.bs.js");

Jest.test("add 2 days", (function () {
        var startDate = new Date(2018, 7, 17);
        var endDate = new Date(2018, 7, 19);
        return Jest.Expect[/* toBe */2](endDate.valueOf(), Jest.Expect[/* expect */0](DateUtil$Workhours.addDays(startDate, 2).valueOf()));
      }));

Jest.test("subtract 2 days", (function () {
        var startDate = new Date(2018, 7, 17);
        var endDate = new Date(2018, 7, 15);
        return Jest.Expect[/* toBe */2](endDate.valueOf(), Jest.Expect[/* expect */0](DateUtil$Workhours.addDays(startDate, -2).valueOf()));
      }));

Jest.test("add 2 days accross month", (function () {
        var startDate = new Date(2018, 7, 30);
        var endDate = new Date(2018, 8, 1);
        return Jest.Expect[/* toBe */2](endDate.valueOf(), Jest.Expect[/* expect */0](DateUtil$Workhours.addDays(startDate, 2).valueOf()));
      }));

Jest.test("add 2 days accross year", (function () {
        var startDate = new Date(2018, 12, 30);
        var endDate = new Date(2019, 1, 1);
        return Jest.Expect[/* toBe */2](endDate.valueOf(), Jest.Expect[/* expect */0](DateUtil$Workhours.addDays(startDate, 2).valueOf()));
      }));

Jest.test("Start of week", (function () {
        var startDate = new Date(2018, 6, 17);
        var endDate = new Date(2018, 6, 15);
        return Jest.Expect[/* toBe */2](endDate.toDateString(), Jest.Expect[/* expect */0](DateUtil$Workhours.startOfWeek(startDate).toDateString()));
      }));

Jest.test("Start of week on start of week", (function () {
        var startDate = new Date(2018, 6, 15);
        var endDate = new Date(2018, 6, 15);
        return Jest.Expect[/* toBe */2](endDate.toDateString(), Jest.Expect[/* expect */0](DateUtil$Workhours.startOfWeek(startDate).toDateString()));
      }));

Jest.test("Start of week on end of week", (function () {
        var startDate = new Date(2018, 6, 21);
        var endDate = new Date(2018, 6, 15);
        return Jest.Expect[/* toBe */2](endDate.toDateString(), Jest.Expect[/* expect */0](DateUtil$Workhours.startOfWeek(startDate).toDateString()));
      }));

Jest.test("End of week", (function () {
        var startDate = new Date(2018, 6, 17);
        var endDate = new Date(2018, 6, 21, 23, 59, 59);
        endDate.setMilliseconds(999);
        return Jest.Expect[/* toBe */2](endDate.toDateString(), Jest.Expect[/* expect */0](DateUtil$Workhours.endOfWeek(startDate).toDateString()));
      }));

Jest.test("End of week on end of week", (function () {
        var startDate = new Date(2018, 6, 21);
        var endDate = new Date(2018, 6, 21, 23, 59, 59);
        endDate.setMilliseconds(999);
        return Jest.Expect[/* toBe */2](endDate.toDateString(), Jest.Expect[/* expect */0](DateUtil$Workhours.endOfWeek(startDate).toDateString()));
      }));

Jest.test("End of week on start of week", (function () {
        var startDate = new Date(2018, 6, 15);
        var endDate = new Date(2018, 6, 21, 23, 59, 59);
        endDate.setMilliseconds(999);
        return Jest.Expect[/* toBe */2](endDate.toDateString(), Jest.Expect[/* expect */0](DateUtil$Workhours.endOfWeek(startDate).toDateString()));
      }));

/*  Not a pure module */
